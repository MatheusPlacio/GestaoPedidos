{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class EventoService {\n  constructor() {\n    this.atualizarProdutosSubject = new Subject();\n    // Observable que outros componentes podem se inscrever\n    this.atualizarProdutos$ = this.atualizarProdutosSubject.asObservable();\n  }\n  // Método para emitir evento de atualização\n  emitirAtualizacaoProdutos() {\n    this.atualizarProdutosSubject.next();\n  }\n  static {\n    this.ɵfac = function EventoService_Factory(t) {\n      return new (t || EventoService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: EventoService,\n      factory: EventoService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["Subject","EventoService","constructor","atualizarProdutosSubject","atualizarProdutos$","asObservable","emitirAtualizacaoProdutos","next","factory","ɵfac","providedIn"],"sources":["C:\\Users\\mathe\\source\\repos\\GestaoPedidos\\GestaoPedidos.Angular\\src\\app\\services\\evento.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EventoService {\r\n  private atualizarProdutosSubject = new Subject<void>();\r\n  \r\n  // Observable que outros componentes podem se inscrever\r\n  atualizarProdutos$ = this.atualizarProdutosSubject.asObservable();\r\n\r\n  // Método para emitir evento de atualização\r\n  emitirAtualizacaoProdutos() {\r\n    this.atualizarProdutosSubject.next();\r\n  }\r\n}\r\n"],"mappings":"AACA,SAASA,OAAO,QAAQ,MAAM;;AAK9B,OAAM,MAAOC,aAAa;EAH1BC,YAAA;IAIU,KAAAC,wBAAwB,GAAG,IAAIH,OAAO,EAAQ;IAEtD;IACA,KAAAI,kBAAkB,GAAG,IAAI,CAACD,wBAAwB,CAACE,YAAY,EAAE;;EAEjE;EACAC,yBAAyBA,CAAA;IACvB,IAAI,CAACH,wBAAwB,CAACI,IAAI,EAAE;EACtC;;;uBATWN,aAAa;IAAA;EAAA;;;aAAbA,aAAa;MAAAO,OAAA,EAAbP,aAAa,CAAAQ,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}